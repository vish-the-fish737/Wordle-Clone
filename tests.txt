x canary test

x tally for target FAVOR guess FAVOR
x tally for target FAVOR guess TESTS
x tally for target FAVOR guess RAPID
x tally for target FAVOR guess MAYOR
x tally for target FAVOR guess RIVER
x tally for target FAVOR guess AMAST
x tally for target FAVOR guess FOR throws an exception
x tally for target FAVOR guess FERVER throws an exception
x tally for target SKILL guess SKILL
x tally for target SKILL guess SWIRL
x tally for target SKILL guess CIVIL
x tally for target SKILL guess SHIMS
x tally for target SKILL guess SILLY
x tally for target SKILL guess SLICE

x play with attempt 0 target FAVOR and guess FAVOR

x play deal with invalid guess on first attempt
x play first attempt with non-winning guess

x play second attempt with winning guess
x play second attempt with non-winning guess
x play third attempt with winning guess
x play third attempt with non-winning guess
x play fourth attempt with winning guess
x play fourth attempt with non-winning guess
x play fifth attempt with winning guess
x play fifth attempt with non-winning guess
x play sixth attempt with winning guess
x play sixth attempt with non-winning guess
x play seventh attempt with winning guess
x play eight attempt with non-winning guess

x play throws an exception for attempt 1, target FAVOR and guess FEVER where FEVER is considered incorrect spelling

x play returns proper response for attempt 1, target FAVOR and guess FEVER where FEVER is considered correct spelling

x play throws an exception for attempt 1, target FAVOR and guess FEVER where the spellcheck service fails with a network error

x get_response takes "FAVOR", accesses the link, return the string 
'true'

x get_response takes "FAVRR", accesses the link, return the string 
'false'

x parse takes 'true' and returns True


X parse takes 'false' and returns False
X parse takes 'Invalid text' and throws an exception with message "Invalid response"

x isSpellingCorrect returns true if getResponse returns true and uses parse
x isSpellingCorrect returns false if getResponse returns false and uses parse
x isSpellingCorrect throws Network Error if getResponse throws that exception

x getResponse returns a list of words by calling the webservice

x getARandomWord given a list of words as argument
x getARandomWord returns two different words given the same list, on two different calls
  x for this to work properly, we will have to pass a seed to getARandomWord in addition to
  the words list. In the test we can pass two different seed values, like do
    assertNotEquals(get_a_random_word(words, 1001), get_a_random_word(words, 1002))

Let's integrate the GUI to spellcheck and pick from the words list
We can now bring in the GUI from assign1 to assign2. If the code complexity shows as high,
we can split functions into smaller functions until the complexity errors go away. After that we can integrate the spellcheck feature in the GUI and then integrate the word pick feature.
